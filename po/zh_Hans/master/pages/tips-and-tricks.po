# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# Bobby Rong <rjl931189261@126.com>, 2022.
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2022-05-16 22:01+0000\n"
"PO-Revision-Date: 2022-06-12 15:18+0000\n"
"Last-Translator: Bobby Rong <rjl931189261@126.com>\n"
"Language-Team: Chinese (Simplified) <https://translate.fedoraproject.org/"
"projects/fedora-docs-l10n-fedora-silverblue/masterpagestips-and-tricks/"
"zh_Hans/>\n"
"Language: zh_Hans\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.12.2\n"

#. type: Title =
#: pages/tips-and-tricks.adoc:1
#, no-wrap
msgid "Tips and Tricks"
msgstr "提示和技巧"

#. type: Title ==
#: pages/tips-and-tricks.adoc:3
#, no-wrap
msgid "Working with Toolbx"
msgstr "使用 Toolbx"

#. type: Title ===
#: pages/tips-and-tricks.adoc:5
#, no-wrap
msgid "Finding out if you are currently in a Toolbx container"
msgstr "检查你是否位于一个 Toolbx 容器中"

#. type: Plain text
#: pages/tips-and-tricks.adoc:9
msgid ""
"If you frequently make use of Toolbx to perform various tasks and use "
"multiple Toolbx containers it can be hard to keep track of whether you are "
"currently executing commands on the host or in a Toolbx container.  "
"Furthermore, there is currently no command to tell you in which Toolbx "
"container you are working."
msgstr ""
"如果你经常使用 Toolbx 执行各种任务并使用多个 Toolbx 容器，"
"有时可能会搞不清楚自己是在主机上还是在 Toolbx 容器中执行命令。"
"毕竟目前没有任何命令告诉你正在哪个 Toolbx 容器中工作。"

#. type: Plain text
#: pages/tips-and-tricks.adoc:11
msgid ""
"To alleviate this, you can add the following shell alias at the end of your "
"`~/.bashrc`:"
msgstr "为了缓解这种情况，你可以在 `~/.bashrc` 末尾添加下面的 shell 别名："

#. type: Plain text
#: pages/tips-and-tricks.adoc:13
#, no-wrap
msgid "  alias istoolbx='[ -f \"/run/.toolboxenv\" ] && grep -oP \"(?<=name=\\\")[^\\\";]+\" /run/.containerenv'\n"
msgstr ""
"  alias istoolbx='[ -f \"/run/.toolboxenv\" ] && grep -oP \"(?<=name=\\\")[^"
"\\\";]+\" /run/.containerenv'\n"

#. type: Plain text
#: pages/tips-and-tricks.adoc:16
msgid ""
"When you open a new shell, you now have access to the new command "
"`istoolbx`.  This will behave as follows:"
msgstr "当你打开一个新的 Shell 的时候，你就能使用一个新的命令 `istoolbx`："

#. type: Plain text
#: pages/tips-and-tricks.adoc:18
msgid "When run from the host, returns an exit code of 1"
msgstr "当你在主机执行这个命令，它会以返回值 1 退出"

#. type: Plain text
#: pages/tips-and-tricks.adoc:19
msgid ""
"When run from a Toolbx container, returns an exit code of 0 and prints the "
"current Toolbx containers name to the console"
msgstr "当你在 Toolbx 容器执行这个命令，它会以返回值 0 退出同时打印当前 Toolbx "
"的容器名称"

#. type: Plain text
#: pages/tips-and-tricks.adoc:21
msgid ""
"If a more automated solution is your preference the following added to your "
"`~/.bashrc` will change your bash prompt to include \"[toolbox <name>]\":"
msgstr ""
"当然你也可以在 `~/.bashrc` 添加下面的内容，这样子你的 Bash "
"提示符中就能直接包含 \"[toolbox <name>]\" 了："

#. type: Plain text
#: pages/tips-and-tricks.adoc:31
#, no-wrap
msgid ""
"```\n"
"function is_toolbox() {\n"
"    if [ -f \"/run/.toolboxenv\" ]\n"
"    then\n"
"        TOOLBOX_NAME=$(cat /run/.containerenv | grep -oP \"(?<=name=\\\")[^\\\";]+\")\n"
"        echo \"[${HOSTNAME} ${TOOLBOX_NAME}]\"\n"
"    fi\n"
"}\n"
"```\n"
msgstr ""
"```\n"
"function is_toolbox() {\n"
"    if [ -f \"/run/.toolboxenv\" ]\n"
"    then\n"
"        TOOLBOX_NAME=$(cat /run/.containerenv | grep -oP \"(?<=name=\\\")[^\\"
"\";]+\")\n"
"        echo \"[${HOSTNAME} ${TOOLBOX_NAME}]\"\n"
"    fi\n"
"}\n"
"```\n"

#. type: Plain text
#: pages/tips-and-tricks.adoc:33
msgid ""
"Now you can include `is_toolbox` in your `PS1` variable and not need to "
"execute any extra commands in order to know whether or not your are in a "
"toolbox or host shell."
msgstr "现在你就可以将 `is_toolbox` 包含在 `PS1` "
"变量中而无需再手动执行别的命令来确认你是否在 toolbox 中了。"

#. type: Plain text
#: pages/tips-and-tricks.adoc:38
msgid ""
"Example: ``` export PS1=\"\\[\\e[31m\\]\\`is_toolbox\\`\\]\\e[m\\]\\[\\e[32m"
"\\]\\\\$ \\[\\e[m\\]\\[\\e[37m\\]❱\\[\\e[m\\] \" ```"
msgstr ""
"例如：``` export PS1=\"\\[\\e[31m\\]\\`is_toolbox\\`\\]\\e[m\\]\\[\\e[32m\\]"
"\\\\$ \\[\\e[m\\]\\[\\e[37m\\]❱\\[\\e[m\\] \" ```"

#. type: Plain text
#: pages/tips-and-tricks.adoc:40
msgid ""
"This results in a prompt which appears as such when not in a toolbox: `$ ❱`"
msgstr "如果你不在 toolbox 中，它就会显示为 `$ ❱`"

#. type: Plain text
#: pages/tips-and-tricks.adoc:42
msgid ""
"However, when running in a toolbox named \"default\" looks like: `[toolbox "
"default]$ ❱`"
msgstr "如果你在一个名为 \"default\" 的 toolbox 它则会显示为 `[toolbox default]$ ❱`"

#. type: Title ===
#: pages/tips-and-tricks.adoc:43
#, no-wrap
msgid "Running applications from inside Toolbx on the host"
msgstr "在 Host 上运行 Toolbx 里的应用程序"

#. type: Plain text
#: pages/tips-and-tricks.adoc:47
msgid ""
"This can be necessary if you want to interact with tools available from the "
"host, for example `podman`, `nmcli` or `rpm-ostree` without leaving the "
"Toolbx container in between.  You can use `flatpak-spawn`, included in the "
"base installation for this:"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:49
#, no-wrap
msgid "  $ flatpak-spawn --host podman --help\n"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:51
msgid ""
"If the application you want to call requires `sudo` access, the `-S` option "
"must be supplied to `sudo` like below:"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:53
#, no-wrap
msgid "  $ flatpak-spawn --host sudo -S rpm-ostree status\n"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:56
msgid ""
"If you find yourself using commands like these frequently to access e.g. the "
"flatpak command from inside the Toolbx container, you can create yourself a "
"short custom wrapper script (*inside the Toolbx container*).  To do this, "
"perform the following steps:"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:58
msgid ""
"Define the `istoolbx` alias (for convenience) by executing the command "
"mentioned above in your terminal"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:61
msgid ""
"Make sure you are in a Toolbx container.  If the following command doesn't "
"produce any output, you are likely still working on the host!"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:64
#, no-wrap
msgid ""
"[toolbx]$ istoolbx\n"
"<Toolbx container name here>\n"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:66
msgid ""
"Once you have made sure you're in a Toolbx container, execute the following "
"command:"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:68
#, no-wrap
msgid "[toolbx]$ echo -e '#!/bin/sh\\nexec /usr/bin/flatpak-spawn --host flatpak \"$@\"' | sudo tee /usr/local/bin/flatpak 1>/dev/null && sudo chmod +x /usr/local/bin/flatpak\n"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:70
msgid ""
"You now have a `flatpak` command available that allows you to interact with "
"`flatpak` as if you were running the command on the host."
msgstr ""

#. type: Title ==
#: pages/tips-and-tricks.adoc:71
#, no-wrap
msgid "Working with `ostree`/`rpm-ostree`"
msgstr ""

#. type: Title ===
#: pages/tips-and-tricks.adoc:73
#, no-wrap
msgid "Tracking changes to the base OS"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:77
msgid ""
"Some directories in `ostree`-based operating systems are writable by the "
"user, like `/etc`.  You can get a quick overview of the files changed under "
"`/etc` using the following command:"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:79
#, no-wrap
msgid "  $ sudo ostree admin config-diff\n"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:81
msgid "To get a more elaborate diff, you can use something like this:"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:83
#, no-wrap
msgid "  $ sudo diff -yrW200 --suppress-common-lines --color=always /usr/etc /etc 2>/dev/null\n"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:86
#, no-wrap
msgid ""
"This works because ostree keeps an unmodified copy of the `/etc` directory under `/usr/etc`.\n"
"      All of your changes go to `/etc` directly.\n"
msgstr ""

#. type: Title ==
#: pages/tips-and-tricks.adoc:87
#, no-wrap
msgid "Working with Flatpak applications"
msgstr ""

#. type: Title ===
#: pages/tips-and-tricks.adoc:89
#, no-wrap
msgid "Directly accessing Flatpak applications from the CLI"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:92
msgid ""
"The most noticable change when using Flatpak applications instead of "
"conventional installations is that the applications cannot be directly "
"called from the CLI any more, like so:"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:95
#, no-wrap
msgid ""
"  $ evince\n"
"  bash: command not found: evince\n"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:97
msgid "Instead, one can call them like this:"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:99
#, no-wrap
msgid "  $ flatpak run org.gnome.Evince\n"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:101
msgid ""
"In addition, most Flatpak applications export their internal binaries under "
"an installation-dependent location:"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:103
msgid ""
"For Flatpak applications installed from `system` remotes, these can be found "
"under `/var/lib/flatpak/exports/bin/`"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:104
msgid ""
"For Flatpak applications installed from `user` remotes, these can be found "
"under `$HOME/.local/share/flatpak/exports/bin/`"
msgstr ""

#. type: delimited block =
#: pages/tips-and-tricks.adoc:108
msgid ""
"If you're unsure to which installation a Flatpak application belongs, you "
"can use this command to print it out:"
msgstr ""

#. type: delimited block =
#: pages/tips-and-tricks.adoc:110
#, no-wrap
msgid "  $ flatpak list --app --columns=name,installation\n"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:113
msgid "You can then either add these directories to your `$PATH`:"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:115
#, no-wrap
msgid "  $ org.gnome.Evince\n"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:117
msgid ""
"or setup shell `alias`es as needed to make them available to the CLI like so:"
msgstr ""

#. type: Plain text
#: pages/tips-and-tricks.adoc:120
#, no-wrap
msgid ""
"  $ alias evince=\"flatpak run org.gnome.Evince\"\n"
"    # or alias evince=\"org.gnome.Evince\"\n"
"  $ evince\n"
msgstr ""
